// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ResetPosition
#pragma kernel Update
#include "Common/SimplexNoise3D.cginc"

StructuredBuffer<float3> _initPosBuffer;
RWStructuredBuffer<float3> _posBuffer;
float _time;
float3 _velocity;
float _seed;

float rand(float n) { return frac(sin(n) * 43758.5453123); }
float noise(float p)
{
	float fl = floor(p);
	float fc = frac(p);
	return lerp(rand(fl), rand(fl + 1.0), fc);
}

float3 snoiseVec3(float3 x) {
	float s = snoise(float3(x));
	float s1 = snoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
	float s2 = snoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
	float3 c = float3(s, s1, s2);
	return c;
}

float3 curlNoise(float3 p) {
	const float e = 0.001;// 0.0009765625;
	//const float e2 = 2.0 * e;

	float3 dx = float3(e, 0.0, 0.0);
	float3 dy = float3(0.0, e, 0.0);
	float3 dz = float3(0.0, 0.0, e);

	float3 p_x0 = snoiseVec3(p - dx);
	float3 p_x1 = snoiseVec3(p + dx);
	float3 p_y0 = snoiseVec3(p - dy);
	float3 p_y1 = snoiseVec3(p + dy);
	float3 p_z0 = snoiseVec3(p - dz);
	float3 p_z1 = snoiseVec3(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	const float divisor = 1.0 / (2.0 * e);
	return normalize(float3(x, y, z) * divisor);
}

[numthreads(8, 1, 1)]
void ResetPosition(uint3 id : SV_DispatchThreadID)
{
	_posBuffer[id.x] = _initPosBuffer[id.x];
}

[numthreads(8,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if(_time > 0)
		_posBuffer[id.x] += float3(-1,0,0) * _time * 0.001 + curlNoise(((_posBuffer[id.x]) + _seed) * 0.01);// float3(0, 20 * cnoise(_time * 0.6 + _initPosBuffer[id.x].xz * 0.01), 0);
	//_posBuffer[id.x] += _initPosBuffer[id.x] + float3(30 * fbm(_time * 0.6 + _initPosBuffer[id.x].xz * 0.01, 5), 20 * fbm(_time * 0.6 + _initPosBuffer[id.x].xz * 0.01, 5), 0);
}

