// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ResetPosition
#pragma kernel UpdatePosition
#pragma kernel AddParticles
#include "Common/SimplexNoise3D.cginc"
#include "Particle.cginc"

StructuredBuffer<float4> _initPosBuffer;
RWStructuredBuffer<GPUParticle> _particleBuffer;
RWStructuredBuffer<GPUParticle> _newParticleBuffer;
RWStructuredBuffer<ParticleGlobal> _globalBuffer;

float _time;
float3 _velocity;
float _seed;
float _deltaTime;

float rand(float n) { return frac(sin(n) * 43758.5453123); }
float noise(float p)
{
	float fl = floor(p);
	float fc = frac(p);
	return lerp(rand(fl), rand(fl + 1.0), fc);
}

float3 snoiseVec3(float3 x) {
	float s = snoise(float3(x));
	float s1 = snoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
	float s2 = snoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
	float3 c = float3(s, s1, s2);
	return c;
}

float3 curlNoise(float3 p) {
	const float e = 0.0001;// 0.0009765625;

	float3 dx = float3(e, 0.0, 0.0);
	float3 dy = float3(0.0, e, 0.0);
	float3 dz = float3(0.0, 0.0, e);

	float3 p_x0 = snoiseVec3(p - dx);
	float3 p_x1 = snoiseVec3(p + dx);
	float3 p_y0 = snoiseVec3(p - dy);
	float3 p_y1 = snoiseVec3(p + dy);
	float3 p_z0 = snoiseVec3(p - dz);
	float3 p_z1 = snoiseVec3(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	const float divisor = 1.0 / (2.0 * e);
	return normalize(float3(x, y, z) * divisor);
}

[numthreads(8, 1, 1)]
void ResetPosition(uint3 id : SV_DispatchThreadID)
{
	_particleBuffer[id.x].pos = _initPosBuffer[id.x];
}

[numthreads(8,1,1)]
void UpdatePosition(uint id : SV_DispatchThreadID)
{
	GPUParticle particle = _particleBuffer[id];

	if (particle.lifeTime > 0)
	{
		particle.lifeTime -= _deltaTime;

		particle.velocity = float3(curlNoise(particle.pos * 0.1)) * 0.1;
		particle.pos += particle.velocity;
	}

	particle.accelation = 0;

	_particleBuffer[id] = particle;
}

[numthreads(8, 1, 1)]
void AddParticles(uint id : SV_DispatchThreadID)
{
	if (id < _globalBuffer[0].numNewParticle)
	{
		float ud = _globalBuffer[0].numActiveParticle + id;

		if (ud >= _globalBuffer[0].numMaxParticle)
			ud = 0;

		if (_particleBuffer[ud].lifeTime <= 0)
		{
			_particleBuffer[ud] = _newParticleBuffer[id];
		}

		_globalBuffer[0].numActiveParticle = ud + 1;
	}
}

